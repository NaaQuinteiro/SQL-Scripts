-- 1.Qual é o ID do autor do livro com o título 'Harry Potter e a Pedra Filosofali'?
SELECT id_autor
FROM livro_autor 
WHERE id_livro IN (
	SELECT id_livro 
    FROM livros 
    WHERE titulo = 'Harry Potter e a Pedra Filosofal' 
    );

-- 2.Quais são os livros escritos por 'Holly Black'?
SELECT titulo 
FROM livros 
WHERE id_livro IN(
	SELECT id_livro 
    FROM livro_autor 
    INNER JOIN autor ON autor.id_autor = livro_autor.id_autor
    WHERE nome_autor = 'Holly Black'
);

-- 3.Contar quantos livros existem em cada categoria.
SELECT nome_categoria, COUNT(id_livro)
FROM categoria
INNER JOIN livros_categoria ON livros_categoria.id_categoria = categoria.id_categoria
GROUP BY nome_categoria;

-- 4.Encontrar o autor com o maior número de livros publicados.
SELECT autor.nome_autor AS autor, COUNT(livro_autor.id_livro) AS qtd_livros
FROM autor
JOIN livro_autor ON autor.id_autor = livro_autor.id_autor
GROUP BY autor.nome_autor
HAVING COUNT(livro_autor.id_livro) = (
    SELECT MAX(Numero_Livros_Publicados)
    FROM (
        SELECT COUNT(livro_autor.id_livro) AS Numero_Livros_Publicados
        FROM livro_autor 
        GROUP BY livro_autor.id_autor
    ) AS Subquery
);

SELECT autor.nome_autor, COUNT(livro_autor.id_livro) AS qtdlivros
FROM autor
INNER JOIN livro_autor ON livro_autor.id_autor = autor.id_autor
INNER JOIN livros ON livro_autor.id_livro = livros.id_livro
GROUP BY autor.nome_autor;

-- 5. Calcular a média de livros emprestados por usuário.
SELECT *FROM emprestimo;
SELECT COUNT(*) / COUNT(DISTINCT id_usuario) AS media_livros_usuario
FROM emprestimo;

-- 6.Listar categorias que têm mais de 5 livros
SELECT nome_categoria, COUNT(id_livro) AS categoria_mais_5Livros
FROM categoria
INNER JOIN livros_categoria ON livros_categoria.id_categoria = categoria.id_categoria
GROUP BY nome_categoria
HAVING COUNT(id_livro) > 5;

-- 7.Encontrar o livro mais antigo.
SELECT LIVROS.*
FROM LIVROS
INNER JOIN EMPRESTIMO ON EMPRESTIMO.ID_LIVRO = LIVROS.ID_LIVRO
WHERE DATA_INICIAL = (
	SELECT MIN() 
    FROM EMPRESTIMO
    );

-- 8. Mostrar a quantidade de usuários registrados por mês no ano de 2023.
--Aqui ele mostra o mes e quantos usuarios se registraram naquele mes 
SELECT MONTH(data_registro) AS mes, COUNT(*) AS quantidade_usuarios
FROM usuarios
WHERE YEAR (data_registro) = 2024
GROUP BY MONTH(data_registro)
ORDER BY mes;
SELECT * FROM usuarios;

-- 9. Identificar o livro mais e menos emprestado.
INSERT INTO emprestimo(data_inicial, data_retorno, id_usuario, id_livro)
VALUES 
    ('2024-03-10', '2024-03-13', 7, 5);

-- Livro mais emprestado 
SELECT id_Livro, COUNT(*) AS total_emprestimos 
FROM emprestimo
GROUP BY id_livro
ORDER BY total_emprestimos DESC
LIMIT 1;

-- Livro menos emprestado 
SELECT id_Livro, COUNT(*) AS total_emprestimos 
FROM emprestimo
GROUP BY id_livro
ORDER BY total_emprestimos ASC
LIMIT 1;

-- 10. Calcular a idade média dos autores.
-- A função DATEDIFF() calcula a diferença entre duas datas em dias. Neste caso, estamos calculando a 
-- diferença entre a data atual (CURRENT_DATE()) e a data de nascimento de cada autor.

SELECT AVG(DATEDIFF(CURRENT_DATE(), data_nascimento) / 365.25) AS idade_media_autores
FROM autor;

-- 11. Listar os 3 livros mais recentes. (Como n tenho uma data de publicação vou listar como os 3 livros que foram emprestados recentemente)
SELECT livros.*
FROM livros
INNER JOIN emprestimo ON emprestimo.id_livro = livros.id_livro
ORDER BY emprestimo.data_inicial DESC 
LIMIT 3;

-- 12. Mostrar o total de empréstimos feitos por usuários premium.
SELECT COUNT(*) AS total_emprestimos_premium
FROM emprestimo
INNER JOIN usuarios ON usuarios.id_usuario = emprestimo.id_usuario
WHERE usuarios.nivel_associacao = 'Premium';

-- 13. Determinar o número de livros por autor.
SELECT autor.nome_autor, COUNT(*) AS livros_por_autor
FROM livros
INNER JOIN livro_autor ON livro_autor.id_livro = livros.id_livro
INNER JOIN autor ON livro_autor.id_autor = autor.id_autor
GROUP BY autor.nome_autor;

-- 14. Listar cada categoria e o número de livros emprestados para cada uma.
SELECT categoria.nome_categoria, COUNT(*) AS livros_por_categoria
FROM livros
INNER JOIN livros_categoria ON livros_categoria.id_livro = livros.id_livro
INNER JOIN categoria ON livros_categoria.id_categoria = categoria.id_categoria
GROUP BY categoria.nome_categoria;

-- 15. Encontrar o usuário que pegou emprestado o maior número de livros únicos.
SELECT emprestimo.id_usuario, COUNT(DISTINCT emprestimo.id_livro) AS total_livros_unicos
FROM emprestimo 
GROUP BY emprestimo.id_usuario
ORDER BY total_livros_unicos DESC 
LIMIT 1;









